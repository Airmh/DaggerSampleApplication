// Generated by Dagger (https://google.github.io/dagger).
package com.airmh.anakin.daggertest.test4.di;

import com.airmh.anakin.daggertest.test4.Test4InjectClass;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class Test4FragmentModule_CreateTestClassFactory implements Factory<Test4InjectClass> {
  private final Test4FragmentModule module;

  public Test4FragmentModule_CreateTestClassFactory(Test4FragmentModule module) {
    this.module = module;
  }

  @Override
  public Test4InjectClass get() {
    return provideInstance(module);
  }

  public static Test4InjectClass provideInstance(Test4FragmentModule module) {
    return proxyCreateTestClass(module);
  }

  public static Test4FragmentModule_CreateTestClassFactory create(Test4FragmentModule module) {
    return new Test4FragmentModule_CreateTestClassFactory(module);
  }

  public static Test4InjectClass proxyCreateTestClass(Test4FragmentModule instance) {
    return Preconditions.checkNotNull(
        instance.createTestClass(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
