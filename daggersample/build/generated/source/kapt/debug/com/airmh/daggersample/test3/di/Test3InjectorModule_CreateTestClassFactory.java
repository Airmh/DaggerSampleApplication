// Generated by Dagger (https://google.github.io/dagger).
package com.airmh.daggersample.test3.di;

import com.airmh.daggersample.test3.Test3InjectClass;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class Test3InjectorModule_CreateTestClassFactory implements Factory<Test3InjectClass> {
  private final Test3InjectorModule module;

  public Test3InjectorModule_CreateTestClassFactory(Test3InjectorModule module) {
    this.module = module;
  }

  @Override
  public Test3InjectClass get() {
    return provideInstance(module);
  }

  public static Test3InjectClass provideInstance(Test3InjectorModule module) {
    return proxyCreateTestClass(module);
  }

  public static Test3InjectorModule_CreateTestClassFactory create(Test3InjectorModule module) {
    return new Test3InjectorModule_CreateTestClassFactory(module);
  }

  public static Test3InjectClass proxyCreateTestClass(Test3InjectorModule instance) {
    return Preconditions.checkNotNull(
        instance.createTestClass(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
