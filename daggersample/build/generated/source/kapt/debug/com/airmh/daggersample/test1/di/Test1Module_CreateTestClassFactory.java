// Generated by Dagger (https://google.github.io/dagger).
package com.airmh.daggersample.test1.di;

import com.airmh.daggersample.test1.Test1InjectClass;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class Test1Module_CreateTestClassFactory implements Factory<Test1InjectClass> {
  private final Test1Module module;

  public Test1Module_CreateTestClassFactory(Test1Module module) {
    this.module = module;
  }

  @Override
  public Test1InjectClass get() {
    return provideInstance(module);
  }

  public static Test1InjectClass provideInstance(Test1Module module) {
    return proxyCreateTestClass(module);
  }

  public static Test1Module_CreateTestClassFactory create(Test1Module module) {
    return new Test1Module_CreateTestClassFactory(module);
  }

  public static Test1InjectClass proxyCreateTestClass(Test1Module instance) {
    return Preconditions.checkNotNull(
        instance.createTestClass(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
